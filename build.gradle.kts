/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.4.1/samples
 */
@Suppress("DSL_SCOPE_VIOLATION")  // https://youtrack.jetbrains.com/issue/KTIJ-19369
plugins {
    base  // https://stackoverflow.com/a/54088744
    // https://github.com/ben-manes/gradle-versions-plugin#dependencyupdates
    // alias(libs.plugins.gradle.versions)
    // Create root virtualenv
    // id("ru.vyarus.use-python") version "2.3.0"
    `maven-publish`
    id("idea")
    id("com.dorongold.task-tree") version "2.1.1"
    id("com.osacky.doctor") version "0.8.1"
}

idea {
    module {
        isDownloadJavadoc = true
        isDownloadSources = true
    }
}

version = "0.1"
group = "com.trash"

/*
python {
    minPythonVersion = "3.8.0"
    // minimal required pip version (m.m.m)
    minPipVersion = "20.0.0"

    pip("django:4.0.4")
    pip("jax:0.3.8")
    pip("plotly:5.7.0")
}
*/

// See https://github.com/gradle/gradle/issues/21541
// We want the xml for circleci and other tools consumption.
tasks {
    register("junit5TestReport", Copy::class) {
        from(subprojects.map { it.tasks.withType<Test>() })
        into("./build/test-results/test")
        include("*.xml")
    }
    val junit5TestReport = project.tasks.first { it.name.contains("junit5TestReport") }
    check {
        finalizedBy(junit5TestReport)
    }
}

doctor {
    javaHome {
        ensureJavaHomeMatches.set(false)
        ensureJavaHomeIsSet.set(false)
        failOnError.set(false)
    }
}

tasks.register("test") {
    dependsOn(gradle.includedBuilds.map { it.task(":test") })
}

tasks.register("integrationTest") {
    dependsOn(gradle.includedBuilds.map { it.task(":integrationTest") })
}

tasks.assemble {
    dependsOn(gradle.includedBuilds.map { it.task(":assemble") })
}
tasks.check {
    dependsOn(gradle.includedBuilds.map { it.task(":check") })
}
tasks.build {
    dependsOn(gradle.includedBuilds.map { it.task(":build") })
}
tasks.clean {
    dependsOn(gradle.includedBuilds.map { it.task(":clean") })
}
